// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WRITER
  READER
}

// User model
model User {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  username                String         @unique
  name                    String
  last_name               String
  email                   String         @unique
  password                String
  avatar                  String?
  role                    Role           @default(ADMIN)
  email_verified          Boolean        @default(false)
  followedBy              User[]         @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs           String[]       @db.ObjectId
  following               User[]         @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs            String[]       @db.ObjectId
  likedArticles           Article[]      @relation(fields: [likedArticlesIDs], references: [id])
  likedArticlesIDs        String[]       @db.ObjectId
  likedComments           Comment[]      @relation("LikedComments", fields: [likedCommentsIDs], references: [id])
  likedCommentsIDs        String[]       @db.ObjectId
  dislikedComments        Comment[]      @relation("disLikedComments", fields: [dislikedCommentsIDs], references: [id])
  dislikedCommentsIDs     String[]       @db.ObjectId
  sendComments            Comment[]      @relation("Sender", fields: [sendCommentsIDs], references: [id])
  sendCommentsIDs         String[]       @db.ObjectId
  notificationReceiver    Notification[] @relation(fields: [notificationReceiverIDs], references: [id])
  notificationReceiverIDs String[]       @db.ObjectId
  sendMessages            Message[]      @relation("Sender")
  sendMessagesIDs         String[]       @db.ObjectId
  receiveMessages         Message[]      @relation("Receiver")
  receiveMessagesIDs      String[]       @db.ObjectId
  collections             Collection[]   @relation(fields: [collectionIDS], references: [id])
  collectionIDS           String[]       @db.ObjectId
  apprications            Application[]  @relation(fields: [appricationsIDs], references: [id])
  appricationsIDs         String[]       @db.ObjectId
}

// Article model
model Article {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  content              String
  date_created         DateTime   @default(now())
  date_updated         DateTime   @updatedAt
  status               String // Assuming 'draft', 'published', 'unpublished', 'deleted'
  cover_img            String?
  likes                User[]     @relation(fields: [likesIDs], references: [id])
  likesIDs             String[]   @db.ObjectId
  articleComments      Comment[]
  articleCommentsIDs   String[]   @db.ObjectId
  articlesCollection   Collection @relation(fields: [articlesCollectionID], references: [id])
  articlesCollectionID String     @db.ObjectId
}

// Comment model
model Comment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  date_created DateTime @default(now())
  date_updated DateTime @updatedAt
  message      String
  likes        User[]   @relation("LikedComments", fields: [likesIDs], references: [id])
  likesIDs     String[] @db.ObjectId
  dislikes     User[]   @relation("disLikedComments", fields: [dislikesIDs], references: [id])
  dislikesIDs  String[] @db.ObjectId
  senders      User[]   @relation("Sender", fields: [sendersIDS], references: [id])
  sendersIDS   String[] @db.ObjectId
  articles     Article  @relation(fields: [articlesIDs], references: [id])
  articlesIDs  String   @db.ObjectId
}

// Notification model
model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  status     String // Assuming 'read', 'unread', 'dismissed'
  receiver   User[]   @relation(fields: [receiverId], references: [id])
  receiverId String[] @db.ObjectId
}

// // Message model
model Message {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  date_created DateTime @default(now())
  subject      String
  message      String
  status       String // Assuming 'read', 'unread', 'trashed'
  sender       User     @relation("Sender", fields: [senderId], references: [id])
  senderId     String   @db.ObjectId
  receiver     User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String   @db.ObjectId
}

// Collection model
model Collection {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  articles    Article[]
  articlesIDs String[]  @db.ObjectId
  owner       User[]    @relation(fields: [ownerId], references: [id])
  ownerId     String[]  @db.ObjectId
}

// Application model
model Application {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  message String
  status  String // Assuming 'pending', 'approved', 'rejected'
  user    User[]   @relation(fields: [userId], references: [id])
  userId  String[] @db.ObjectId
}
